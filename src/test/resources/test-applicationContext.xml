<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

<!--    <bean id="userService" class="org.springframework.aop.framework.ProxyFactoryBean">-->
    <bean id="userService" class="springbook.user.service.UserServiceImpl" >
<!--        <property name="target" ref="userServiceImpl" />-->

        <!-- txProxyFactoryBean을 이용 -->
<!--        <property name="transactionManager" ref="transactionManger" />-->
<!--        <property name="pattern" value="upgradeLevels" />-->
<!--        <property name="serviceInterface" value="springbook.user.service.UserService" />-->

        <!-- ProxyFactoryBean을 이용 (spring 제공) -->
<!--        <property name="interceptorNames">-->
<!--            <list>-->
<!--                <value>transactionAdvisor</value>-->
<!--            </list>-->
<!--        </property>-->

        <!-- DefaultAdvisorAutoProxyCreator 적용 -->
        <property name="userDao" ref="userDao" />
        <property name="userLevelUpgradePolicy" ref="userLevelUpgradePolicy" />
        <property name="mailSender" ref="mailSender" />
    </bean>

    <bean id="testUserService"
          class="springbook.user.service.UserServiceTest$TestUserServiceImpl"
          parent="userService" />

    <bean id="userServiceImpl" class="springbook.user.service.UserServiceImpl">
        <property name="userDao" ref="userDao" />
        <property name="mailSender" ref="mailSender" />
    </bean>

    <bean id="userLevelUpgradePolicy" class="springbook.user.service.UserLevelUpgradeEvent" />

    <bean id="mailSender" class="springbook.user.service.DummyMailSender" />

    <tx:annotation-driven/>
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />
    <aop:config>
        <!-- pointcut이 여러 개일 경우 -->
<!--        <aop:pointcut id="transactionPointcut" expression="execution(* *..*ServiceImpl.upgrade*(..))" />-->
<!--        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" />-->

        <!-- pointcut이 한 개일 경우 -->
        <aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)" />
    </aop:config>
        <!-- 만들어둔 transactionAdvice를 이용하는 경우 -->
<!--    <bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">-->
<!--        <property name="transactionManager" ref="transactionManger" />-->
<!--        <property name="transactionAttributes">-->
<!--            <props>-->
<!--                <prop key="get*">PROPAGATION_REQUIRED, readOnly</prop>-->
<!--                <prop key="*">PROPAGATION_REQUIRED</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--    </bean>-->
        <!-- transactionInterceptor를 이용하는 경우 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="*" />
        </tx:attributes>
    </tx:advice>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <context:annotation-config />

    <bean id="userDao" class="springbook.user.dao.UserDaoJdbc">
        <!-- -1- dataSource를 빈으로 등록 -->
<!--        <property name="dataSource" ref="dataSource" />-->
        <!-- -2- JdbcTemplate을 빈으로 등록 -->
        <property name="jdbcTemplate" ref="dataSource" />
<!--        <property name="jdbcContext" ref="jdbcContext" />-->

        <property name="sqlService" ref="sqlService" />
    </bean>

    <bean id="sqlService" class="springbook.user.sqlservice.BaseSqlService">
        <property name="sqlReader" ref="sqlReader" />
        <property name="sqlRegistry" ref="sqlRegistry" />
<!--        <property name="sqlmapFile" value="sqlmap.xml" />-->
    </bean>
<!--    <bean id="sqlService" class="springbook.user.sqlservice.SimpleSqlService">-->
<!--        <property name="sqlMap">-->
<!--            <map>-->
<!--                <entry key="userAdd" value="INSERT INTO users(id, name, password, email, level, login, recommend, lastUpgraded) values(?,?,?,?,?,?,?,?)" />-->
<!--                <entry key="userGet" value="SELECT * FROM users WHERE id = ?" />-->
<!--                <entry key="userGetAll" value="SELECT * FROM users ORDER BY id" />-->
<!--                <entry key="userDeleteAll" value="DELETE FROM users" />-->
<!--                <entry key="userGetCount" value="SELECT COUNT(*) FROM users" />-->
<!--                <entry key="userUpdate" value="update users set name = ?, password = ?, email = ?, level = ?, login = ?, recommend = ?, lastUpgraded = ? where id = ?" />-->
<!--            </map>-->
<!--        </property>-->
<!--    </bean>-->
<!--    <bean id="sqlService" class="springbook.user.sqlservice.OxmSqlService">-->
<!--        <property name="unmarshaller" ref="unmarshaller" />-->
<!--        <property name="sqlRegistry" ref="sqlRegistry" />-->
<!--    </bean>-->
    <bean id="sqlReader" class="springbook.user.sqlservice.JaxbXmlSqlReader" />
    <bean id="sqlRegistry" class="springbook.user.sqlservice.HashMapSqlRegistry" />
    <bean id="unmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="springbook.user.sqlservice.jaxb" />
    </bean>

    <bean id="sqlRegistry" class="springbook.user.sqlservice.updatable.ConcurrentHashMapSqlRegistry"></bean>

<!--    <bean id="jdbcContext" class="springbook.user.dao.JdbcContext">-->
<!--        <property name="dataSource" ref="dataSource" />-->
<!--    </bean>-->

    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost/spring_study?serverTimezone=UTC" />
        <property name="username" value="root" />
        <property name="password" value="min20617" />
    </bean>

    <jdbc:embedded-database id="embeddedDatabase" type="HSQL">
<!--        <jdbc:script location="classpath:schema.sql"/>-->
    </jdbc:embedded-database>
</beans>